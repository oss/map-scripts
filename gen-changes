#!/usr/bin/env python

import urllib
import urllib2
import shutil
import subprocess
import xml.etree.ElementTree as ET
import xml.dom.minidom
from shapely.geometry import Polygon
from shapely.geometry import box
from shapely.wkt import loads
from datetime import datetime

from sys import argv, exit
import smtplib, os, os.path
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.MIMEBase import MIMEBase
from email.Utils import formatdate
from email import Encoders


import pprint
pp = pprint.PrettyPrinter(indent=4)

def nominatim_url(query, **kwargs):
    nominatimurl = 'http://nominatim.openstreetmap.org/search/'
    if query is not None:
        nominatimurl += query
    if not kwargs:
        return nominatimurl
    nominatimurl += '?'
    for kwarg in kwargs:
        if nominatimurl[len(nominatimurl)-1] != '?':
            nominatimurl += '&'
        nominatimurl += kwarg + '=' + kwargs[kwarg]
    return nominatimurl


def parse_api_url(url):
    f = urllib2.urlopen(url)
    return ET.fromstring(f.read())


def get_by_name(name, format='xml', bbox=None):
    name_search = None
    if bbox is not None:
        str_bbox = ""
        for x in bbox:
            if x == bbox[3]:
                str_bbox += str(x)
            else:
                str_bbox += str(x) + ','
        name_search = parse_api_url(nominatim_url(name,
                                                  format=format,
                                                  viewboxlbrt=str_bbox,
                                                  polygon_text="1"))
    else:
        name_search = parse_api_url(nominatim_url(name, format=format,
                                                  polygon_text="1"))
    return name_search


def print_ET(root):
    print xml.dom.minidom.parseString(ET.tostring(root)).toprettyxml(),


def name_to_polygon(name, bbox=None):
    name_root = get_by_name(urllib.quote(name), bbox=bbox)
    polygon = loads(name_root[0].attrib['geotext'])
    return polygon


def send_mail(changes, address):
    msg = MIMEMultipart()
    msg['From'] = 'phantoon'
    msg['To'] = address
    msg['Date'] = formatdate(localtime=True)
    msg['Subject'] = "Changes for Rutgers maps need approval"
    msg.attach(MIMEText("The attached files need approval, run '/usr/bin/commit-changes' on phantoon to allow or deny changes"))
    for change in changes:
        part = MIMEBase('text', 'xml')
        part.set_payload(open(change, "r").read())
        Encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment; filename="{0}"'.format(os.path.basename(change)))
        msg.attach(part)
    smtp = smtplib.SMTP('localhost')
    smtp.sendmail('phantoon', address, msg.as_string())
    smtp.close()


def get_new_jersey(outfile):
    with open(outfile, 'w') as f:
        f.write(urllib2.urlopen("http://download.geofabrik.de/north-america/us/new-jersey-latest.osm.pbf").read())


def max_bbox(bbox1, bbox2):
    return [min(bbox1[0], bbox2[0]),
            min(bbox1[1], bbox2[1]),
            max(bbox1[2], bbox2[2]),
            max(bbox1[3], bbox2[3])]


def get_bbox(node, bboxes):
    bbox = [-180, -90, 180, 90]
    if node.tag == "node":
        lat = int(node.attrib['lat'])
        lon = int(node.attrib['lon'])
        bboxes[node.attrib['id']] = (lat, lon, lat, lon)
    elif node.tag == "way":
        for nd in node.findall('nd'):
            bbox = max_bbox(bbox, bboxes[nd.attrib['ref']])
        bboxes[node.attrib['id']] = (bbox[0], bbox[1], bbox[2], bbox[3])
    elif node.tag == "relation":
        for nd in node.findall('member'):
            bbox = max_bbox(bbox, bboxes[nd.attrib['ref']])
        bboxes[node.attrib['id']] = (bbox[0], bbox[1], bbox[2], bbox[3])
    return box(*bboxes[node.attrib['id']])


if __name__ == '__main__':

    new_jersey = name_to_polygon("New Jersey")

    rutgers_bbox = [-74.5343, 40.4164, -74.3520, 40.5673]
    busch = name_to_polygon("Rutgers Busch Campus", bbox=rutgers_bbox)
    livi = name_to_polygon("Rutgers Livingston Campus", bbox=rutgers_bbox)
    college_ave = name_to_polygon("Rutgers University - New Brunswick",
                                  bbox=rutgers_bbox)
    rutgers = [busch, livi, college_ave]

    print "Moving old New Jersey file"
    shutil.move('/army/new-jersey-latest.osm.pbf', '/army/new-jersey-old.osm.pbf')
    print "Getting new New Jersey file"
    get_new_jersey('/army/new-jersey-latest.osm.pbf')
    print "Calling osmosis"
    subprocess.check_call(['osmosis', '--read-pbf', 'file=/army/new-jersey-old.osm.pbf', '--read-pbf', 'file=/army/new-jersey-latest.osm.pbf', '--derive-change', '--write-xml-change', 'file=/army/diff.osc'])
    #os.remove('/army/new-jersey-old.osm.pbf')

    changes = ET.parse('/army/diff.osc')

    osmdate_format = "%Y-%m-%dT%H:%M:%SZ"

    apply_i = ET.Element('osmChange')
    apply_i.set('version', '0.6')
    ET.SubElement(apply_i, 'create')
    ET.SubElement(apply_i, 'modify')
    ET.SubElement(apply_i, 'del')

    ask_p = ET.Element('osmChange')
    ask_p.set('version', '0.6')
    ET.SubElement(ask_p, 'create')
    ET.SubElement(ask_p, 'modify')
    ET.SubElement(ask_p, 'del')

    bboxes = {}

    for change in changes.getiterator():
        print change.tag
        for node in change:
            print node.tag
            bbox = get_bbox(node, bboxes)
            for campus in rutgers:
                append_osc = apply_i
                if bbox.intersects(campus):
                    append_osc = ask_p
                if data.tag == "create":
                    append_osc[0].append(node)
                elif data.tag == "modify":
                    append_osc[1].append(node)
                else:
                    append_osc[2].append(node)

    print ET.dump(apply_i)

    #max_changetime = datetime.min
    #ask_permission = []
    #closed_changes = [x for x in changesets.findall('changeset') if x.attrib['open'] == "false"]
    #for changeset in closed_changes:
    #    changetime = datetime.strptime(changeset.attrib['closed_at'], osmdate_format)
    #    if changetime > max_changetime:
    #        max_changetime = changetime
    #    p = changeset.attrib
    #    minx = float(p['min_lon'])
    #    miny = float(p['min_lat'])
    #    maxx = float(p['max_lon'])
    #    maxy = float(p['max_lat'])
    #    bbox = box(minx, miny, maxx, maxy)
    #    if bbox.intersects(new_jersey):
    #        for campus in rutgers:
    #            if bbox.intersects(campus):
    #                ask_permission.append(changeset)
    #                break
    #        if changeset not in ask_permission:
    #            apply_immediately.append(changeset)
    #with open(inputFile, 'w') as f:
    #    f.write(max_changetime.strftime(osmdate_format))
    #for changeset in apply_immediately:
    #    f = open('/army/changes/' + str(changeset.attrib['id']) + '.osc', 'w')
    #    f.write(get_change_fp(changeset).read())
    #    f.close()
    #changes = mkdir_ask(ask_permission)
    #send_mail(changes, 'mwr54@nbcs.rutgers.edu')
