#!/usr/bin/env python

import urllib
import urllib2
import shutil
import subprocess
import xml.etree.ElementTree as ET
import xml.dom.minidom
from shapely.geometry import Polygon
from shapely.geometry import box
from shapely.wkt import loads
from datetime import datetime

from sys import argv, exit
import smtplib, os, os.path
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.MIMEBase import MIMEBase
from email.Utils import formatdate
from email import Encoders

NJ_LATEST = ("http://download.geofabrik.de/"
                     "north-america/us/new-jersey-latest.osm.pbf")
NJ_LATEST_PBF = '/army/new-jersey-latest.osm.pbf'
NJ_OLD_PBF = '/army/new-jersey-old.osm.pbf'
OSMOSIS_CMD = [
    'osmosis',
    '--read-pbf',
    'file=/army/new-jersey-old.osm.pbf',
    '--read-pbf',
    'file=/army/new-jersey-latest.osm.pbf',
    '--derive-change',
    '--write-xml-change',
    'file=/army/diff.osc'
]


class OSMChange:
    def __init__(self):
        self.osc = ET.Element('osmChange')
        self.osc.set('version', '0.6')
        ET.SubElement(self.osc, 'create')
        ET.SubElement(self.osc, 'modify')
        ET.SubElement(self.osc, 'delete')

    def __repr__(self):
        return ET.tostring(self.osc)

    def get_create(self):
        print self.osc[0].tag
        return self.osc[0]

    def get_modify(self):
        print self.osc[1].tag
        return self.osc[1]

    def get_delete(self):
        print self.osc[2].tag
        return self.osc[2]

    def dump(self):
        ET.dump(self.osc)


def nominatim_url(query, **kwargs):
    nominatimurl = 'http://nominatim.openstreetmap.org/search/'
    if query is not None:
        nominatimurl += query
    if not kwargs:
        return nominatimurl
    nominatimurl += '?'
    for kwarg in kwargs:
        if nominatimurl[len(nominatimurl)-1] != '?':
            nominatimurl += '&'
        nominatimurl += kwarg + '=' + kwargs[kwarg]
    return nominatimurl


def parse_api_url(url):
    print url
    f = urllib2.urlopen(url)
    root = ET.fromstring(f.read())
    f.close()
    return root


def read_element(element, nid):
    parse_api_url(
        "http://api.openstreetmap.org/api/0.6/{0}/{1}".format(element, nid))


def get_by_name(name, format='xml', bbox=None):
    name_search = None
    if bbox is not None:
        str_bbox = "{0},{1},{2},{3}".format(*bbox)
        name_search = parse_api_url(nominatim_url(name,
                                                  format=format,
                                                  viewboxlbrt=str_bbox,
                                                  polygon_text="1"))
    else:
        name_search = parse_api_url(nominatim_url(name, format=format,
                                                  polygon_text="1"))
    return name_search


def print_ET(root):
    print xml.dom.minidom.parseString(ET.tostring(root)).toprettyxml(),


def name_to_polygon(name, bbox=None):
    name_root = get_by_name(urllib.quote(name), bbox=bbox)
    polygon = loads(name_root[0].attrib['geotext'])
    return polygon


def send_mail(changes, address):
    msg = MIMEMultipart()
    msg['From'] = 'phantoon'
    msg['To'] = address
    msg['Date'] = formatdate(localtime=True)
    msg['Subject'] = "Changes for Rutgers maps need approval"
    msg.attach(MIMEText("The attached files need approval, run"
        "'/usr/bin/commit-changes' on phantoon to allow or deny changes"))
    for change in changes:
        part = MIMEBase('text', 'xml')
        part.set_payload(open(change, "r").read())
        Encoders.encode_base64(part)
        part.add_header('Content-Disposition', 'attachment; filename="{0}"'.\
            format(os.path.basename(change)))
        msg.attach(part)
    smtp = smtplib.SMTP('localhost')
    smtp.sendmail('phantoon', address, msg.as_string())
    smtp.close()


def get_new_jersey(outfile):
    with open(outfile, 'w') as f:
        f.write(urllib2.urlopen(NJ_LATEST).read())


def max_bbox(bbox1, bbox2):
    return [min(bbox1[0], bbox2[0]),
            min(bbox1[1], bbox2[1]),
            max(bbox1[2], bbox2[2]),
            max(bbox1[3], bbox2[3])]


def get_bbox(node, bboxes):
    bbox = [-180, -90, 180, 90]
    if node.tag == "node":
        lat = float(node.attrib['lat'])
        lon = float(node.attrib['lon'])
        bboxes[node.attrib['id']] = (lat, lon, lat, lon)
    else:
        find = "node"
        if node.tag == "member":
            find = "member"
        for element in node.findall(find):
            element_type = element.attrib['type']
            if find == "node":
                element_type = "node"
            try:
                elem_box = bboxes[element.attrib['ref']]
            except KeyError:
                elem_box = get_bbox(read_element(element_type, element.attrib['ref'])[0], bboxes)
            bbox = max_bbox(bbox, elem_box)
        bboxes[node.attrib['id']] = (bbox[0], bbox[1], bbox[2], bbox[3])
    return bboxes[node.attrib['id']]


if __name__ == '__main__':

    new_jersey = name_to_polygon("New Jersey")

    rutgers_bbox = [-74.5343, 40.4164, -74.3520, 40.5673]
    busch = name_to_polygon("Rutgers Busch Campus", bbox=rutgers_bbox)
    livi = name_to_polygon("Rutgers Livingston Campus", bbox=rutgers_bbox)
    college_ave = name_to_polygon("Rutgers University - New Brunswick",
                                  bbox=rutgers_bbox)
    rutgers = [busch, livi, college_ave]

    print "Moving old New Jersey file"
    shutil.move(NJ_LATEST_PBF, NJ_OLD_PBF)

    print "Getting new New Jersey file"
    get_new_jersey(NJ_LATEST_PBF)

    print "Calling osmosis"
    subprocess.check_call(OSMOSIS_CMD)

    print "Removing old NJ file"
    os.remove('/army/new-jersey-old.osm.pbf')

    print "Parsing diff"
    changes = ET.parse('/army/diff.osc')

    apply_i = OSMChange()
    ask_p   = OSMChange()

    bboxes = {}

    print "Calculating bounding boxes"
    for change in changes.getroot():
        for node in change:
            bbox = box(*get_bbox(node, bboxes))
            for campus in rutgers:
                append_osc = apply_i
                if bbox.intersects(campus):
                    append_osc = ask_p
                if node.tag == "create":
                    append_osc.get_create().append(node)
                elif node.tag == "modify":
                    append_osc.get_modify().append(node)
                else:
                    append_osc.get_delete().append(node)

    with open('apply_i', 'w') as f:
        f.write(str(apply_i))
    with open('ask_p', 'w') as f:
        f.write(str(ask_p))
